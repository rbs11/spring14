/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef base_TYPES_H
#define base_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace Rpc {

typedef struct _webpage__isset {
  _webpage__isset() : webpage_data(false), webpage_len(false) {}
  bool webpage_data;
  bool webpage_len;
} _webpage__isset;

class webpage {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  webpage() : webpage_data(), webpage_len(0) {
  }

  virtual ~webpage() throw() {}

  std::string webpage_data;
  int32_t webpage_len;

  _webpage__isset __isset;

  void __set_webpage_data(const std::string& val) {
    webpage_data = val;
  }

  void __set_webpage_len(const int32_t val) {
    webpage_len = val;
  }

  bool operator == (const webpage & rhs) const
  {
    if (!(webpage_data == rhs.webpage_data))
      return false;
    if (!(webpage_len == rhs.webpage_len))
      return false;
    return true;
  }
  bool operator != (const webpage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const webpage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(webpage &a, webpage &b);

typedef struct _cache_stat__isset {
  _cache_stat__isset() : hit_count(false), total_count(false), hit_bytes_count(false), total_bytes_count(false) {}
  bool hit_count;
  bool total_count;
  bool hit_bytes_count;
  bool total_bytes_count;
} _cache_stat__isset;

class cache_stat {
 public:

  static const char* ascii_fingerprint; // = "154BB42C2FFD70F8B3993568C50C5613";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x4B,0xB4,0x2C,0x2F,0xFD,0x70,0xF8,0xB3,0x99,0x35,0x68,0xC5,0x0C,0x56,0x13};

  cache_stat() : hit_count(0), total_count(0), hit_bytes_count(0), total_bytes_count(0) {
  }

  virtual ~cache_stat() throw() {}

  int32_t hit_count;
  int32_t total_count;
  int32_t hit_bytes_count;
  int32_t total_bytes_count;

  _cache_stat__isset __isset;

  void __set_hit_count(const int32_t val) {
    hit_count = val;
  }

  void __set_total_count(const int32_t val) {
    total_count = val;
  }

  void __set_hit_bytes_count(const int32_t val) {
    hit_bytes_count = val;
  }

  void __set_total_bytes_count(const int32_t val) {
    total_bytes_count = val;
  }

  bool operator == (const cache_stat & rhs) const
  {
    if (!(hit_count == rhs.hit_count))
      return false;
    if (!(total_count == rhs.total_count))
      return false;
    if (!(hit_bytes_count == rhs.hit_bytes_count))
      return false;
    if (!(total_bytes_count == rhs.total_bytes_count))
      return false;
    return true;
  }
  bool operator != (const cache_stat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const cache_stat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(cache_stat &a, cache_stat &b);

typedef struct _error__isset {
  _error__isset() : what(false), why(false) {}
  bool what;
  bool why;
} _error__isset;

class error : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  error() : what(0), why() {
  }

  virtual ~error() throw() {}

  int32_t what;
  std::string why;

  _error__isset __isset;

  void __set_what(const int32_t val) {
    what = val;
  }

  void __set_why(const std::string& val) {
    why = val;
  }

  bool operator == (const error & rhs) const
  {
    if (!(what == rhs.what))
      return false;
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const error &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const error & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(error &a, error &b);

} // namespace

#endif
