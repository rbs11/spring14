// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "webproxy.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <sys/select.h>
#include <curl/curl.h>


using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::Rpc;

struct wd_in {
  size_t size;
  size_t len;
  char *data;
};
class webproxyHandler : virtual public webproxyIf {
 public:
  webproxyHandler() {
    // Your initialization goes here
  }

  int32_t ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  void httpget(std::string& _return, std::string& url) {
    // Your implementation goes here

		CURL *curl;
		CURLcode res;
		struct wd_in wdi;

		memset(&wdi, 0, sizeof(wdi));
		printf("httpget\n");
		/* Get a curl handle.  Each thread will need a unique handle. */
		curl = curl_easy_init();

		if(NULL != curl) {
		wdi.size = 1024;
		/* Check for malloc failure in real code. */
		wdi.data = (char*)malloc(wdi.size);

		/* Set the URL for the operation. */
		curl_easy_setopt(curl, CURLOPT_URL, &url);

		/* "write_data" function to call with returned data. */
		curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_data);

		/* userp parameter passed to write_data. */
		curl_easy_setopt(curl, CURLOPT_WRITEDATA, &wdi);

		/* Actually perform the query. */
		res = curl_easy_perform(curl);

		/* Check the return value and do whatever. */

		/* Clean up after ourselves. */
		curl_easy_cleanup(curl);
		}
		else {
		fprintf(stderr, "Error: could not get CURL handle.\n");
		exit(EXIT_FAILURE);
		}

		/* Now wdi.data has the data from the GET and wdi.len is the length
		 of the data available, so do whatever. */

		/* Write the content to stdout. */
		write(STDOUT_FILENO, wdi.data, wdi.len);

		/* cleanup wdi.data buffer. */
		free(wdi.data);

		return;
  }

  size_t write_data(void *buffer, size_t size,
                           size_t nmemb, void *userp) {
    struct wd_in *wdi = (struct wd_in *)userp;

    while(wdi->len + (size * nmemb) >= wdi->size) {
      /* check for realloc failing in real code. */
      wdi->data = (char*)realloc(wdi->data, wdi->size*2);
      wdi->size*=2;
    }

    memcpy(wdi->data + wdi->len, buffer, size * nmemb);
    wdi->len+=size*nmemb;

    return size * nmemb;
  }
};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<webproxyHandler> handler(new webproxyHandler());
  shared_ptr<TProcessor> processor(new webproxyProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  printf("testing1\n");
  server.serve();
  printf("testing2\n");
  return 0;
}

